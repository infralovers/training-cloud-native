apiVersion: v1
kind: Namespace
metadata:
  name: 12-factor-app
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: common-env
  namespace: 12-factor-app
data:
  NAMESPACE: ""
  LOGLEVEL: info
  SERVICEDIR: services
  TRANSPORTER: nats://nats:4222
  MONGO_URI: mongodb://mongo/12-factor-app
  METRICS_ENABLED: "true"
  TRACING_ENABLED: "true"
---
apiVersion: v1
kind: Service
metadata:
  name: api
  namespace: 12-factor-app
  labels:
    app: api
spec:
  selector:
    app: api
  ports:
  - name: web
    port: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  namespace: 12-factor-app
  annotations:
   "sidecar.jaegertracing.io/inject": "true"
spec:
  selector:
    matchLabels:
      app: api
  replicas: 1
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
      - name: api
        image: commandemy/12-factor-app:v2.0
        imagePullPolicy: Always
        envFrom:
        - configMapRef:
            name: common-env
        env:
          - name: SERVICES
            value: api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: products
  namespace: 12-factor-app
  annotations:
   "sidecar.jaegertracing.io/inject": "true"
spec:
  selector:
    matchLabels:
      app: products
  replicas: 1
  template:
    metadata:
      labels:
        app: products
    spec:
      containers:
      - name: products
        image: commandemy/12-factor-app:v2.0
        imagePullPolicy: Always
        envFrom:
        - configMapRef:
            name: common-env
        env:
          - name: SERVICES
            value: products
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo
  namespace: 12-factor-app
  labels:
    app: mongo
spec:
  selector:
    matchLabels:
      app: mongo
  replicas: 1
  serviceName: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - image: mongo:6
          name: mongo
          ports:
            - containerPort: 27017
          resources: {}
          volumeMounts:
            - mountPath: /data/db
              name: mongo-data
      volumes:
        - name: mongo-data
          persistentVolumeClaim:
            claimName: mongo-data

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-data
  namespace: 12-factor-app
  labels:
    name: mongo-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi

---
apiVersion: v1
kind: Service
metadata:
  name: mongo
  namespace: 12-factor-app
  labels:
    app: mongo
spec:
  ports:
    - port: 27017
      targetPort: 27017
  selector:
    app: mongo
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nats-config
  namespace: 12-factor-app
data:
  nats.conf: |
    pid_file: "/var/run/nats/nats.pid"
    http: 8222
---
apiVersion: v1
kind: Service
metadata:
  name: nats
  namespace: 12-factor-app
  labels:
    app: nats
spec:
  selector:
    app: nats
  clusterIP: None
  ports:
  - name: client
    port: 4222
  - name: cluster
    port: 6222
  - name: monitor
    port: 8222
  - name: metrics
    port: 7777
  - name: leafnodes
    port: 7422
  - name: gateways
    port: 7522
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nats
  namespace: 12-factor-app
  labels:
    app: nats
spec:
  selector:
    matchLabels:
      app: nats
  replicas: 1
  serviceName: "nats"
  template:
    metadata:
      labels:
        app: nats
    spec:
      # Common volumes for the containers
      volumes:
      - name: config-volume
        configMap:
          name: nats-config
      - name: pid
        emptyDir: {}

      # Required to be able to HUP signal and apply config reload
      # to the server without restarting the pod.
      shareProcessNamespace: true

      #################
      #               #
      #  NATS Server  #
      #               #
      #################
      terminationGracePeriodSeconds: 60
      containers:
      - name: nats
        image: nats:2.9
        ports:
        - containerPort: 4222
          name: client
        - containerPort: 7422
          name: leafnodes
        - containerPort: 6222
          name: cluster
        - containerPort: 8222
          name: monitor
        - containerPort: 7777
          name: metrics
        command:
         - "nats-server"
         - "--config"
         - "/etc/nats-config/nats.conf"

        # Required to be able to define an environment variable
        # that refers to other environment variables.  This env var
        # is later used as part of the configuration file.
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CLUSTER_ADVERTISE
          value: $(POD_NAME).nats.$(POD_NAMESPACE).svc
        volumeMounts:
          - name: config-volume
            mountPath: /etc/nats-config
          - name: pid
            mountPath: /var/run/nats

        # Liveness/Readiness probes against the monitoring
        #
        livenessProbe:
          httpGet:
            path: /
            port: 8222
          initialDelaySeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: 8222
          initialDelaySeconds: 10
          timeoutSeconds: 5

        # Gracefully stop NATS Server on pod deletion or image upgrade.
        #
        lifecycle:
          preStop:
            exec:
              # Using the alpine based NATS image, we add an extra sleep that is
              # the same amount as the terminationGracePeriodSeconds to allow
              # the NATS Server to gracefully terminate the client connections.
              #
              command: ["/bin/sh", "-c", "/nats-server -sl=ldm=/var/run/nats/nats.pid && /bin/sleep 60"]
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: 12-factor-app
  namespace: 12-factor-app
spec:
  entryPoints:
    - web
  routes:
    - match: Host(`k8s.<ENV-NAME>-user-<ENV-USER-ID>-01.<ENV-ANIMAL>.commandemy.training`) && PathPrefix(`/`)
      kind: Rule
      services:
        - name: api
          port: 3000
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: 12-factor-app-tls
  namespace: 12-factor-app
spec:
  entryPoints:
    - websecure
  tls:
    certResolver: myresolver
  routes:
    - match: Host(`k8s.<ENV-NAME>-user-<ENV-USER-ID>-01.<ENV-ANIMAL>.commandemy.training`) && PathPrefix(`/`)
      kind: Rule
      services:
        - name: api
          port: 3000
